@page "/Venta/Index"
@using System.Linq.Expressions
@using RegistroTecnico.Models
@using RegistroTecnico.Services
@inject IToastService toastService
@inject VentasService ventasService
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<PageTitle>Consulta de Ventas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center">
            <h3 class="card-title fw-bold">Consultar Ventas</h3>
        </div>

        <div class="card-body p-3">

            @* Filtros *@
            <div class="row mb-2">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Desde</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Hasta</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">

                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro" @onchange="Ordenar">
                        <option value="VentaId">Venta Id</option>
                        <option value="Cliente">Cliente</option>
                        <option value="DescripcionSistema">Sistema</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaDesde" id="fechaDesde" />
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaHasta" id="fechaHasta" />
                </div>

            </div>

            <div class="col text-end mt-2">
                <a href="/Ventas/Create" class="btn btn-success">
                    <i class="bi bi-plus-square"></i> Crear
                </a>
            </div>

            @if (isLoading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border text-primary" role="status"></div>
                    <span class="ms-2">Cargando...</span>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>Venta Id</th>
                            <th>Cliente</th>
                            <th>Sistema</th>
                            <th class="text-end pe-5">Monto</th>
                            <th>Fecha de Creaci&oacute;n</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ListaVentas.Any())
                        {
                            @foreach (var venta in ListaVentas)
                            {
                                <tr>
                                    <td>@venta.VentaId</td>
                                    <td>@venta.Cliente.Nombres</td>
                                    <td>
                                        @(venta.VentasDetalles?.FirstOrDefault()?.Sistema?.Descripcion)
                                    </td>

                                    <td class="text-end pe-5">@(venta.VentasDetalles?.Sum(v => v.Monto).ToString("N2"))</td>
                                    <td>@venta.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <a href="/Ventas/Edit/@venta.VentaId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No se encontraron Ventas</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if (paginacion != null)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-3">
                <li class="page-item @(paginacion.HasPreviousPage ? "" : "disabled")">
                    <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex - 1)">Anterior</button>
                </li>
                @for (int i = 1; i <= paginacion.TotalPages; i++)
                {
                    <li class="page-item @(i == paginacion.PageIndex ? "active" : "")">
                        <button type="button" class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(paginacion.HasNextPage ? "" : "disabled")">
                    <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex + 1)">Siguiente</button>
                </li>
            </ul>
            <div class="text-center text-muted">
                Página @(paginacion.PageIndex) de @(paginacion.TotalPages) | Total: @(paginacion.TotalCount) Ventas
            </div>
        </nav>
    }

</div>

@code {
    public List<Ventas> ListaVentas { get; set; } = new();

    public string Filtro { get; set; } = "VentaId";
    public string ValorFiltro { get; set; } = string.Empty;
    public bool isLoading = true;
    public DateTime? FechaDesde { get; set; } = null;
    public DateTime? FechaHasta { get; set; } = null;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private Paginacion<Ventas>? paginacion;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task CargarYOrdenar()
    {
        try
        {
            paginacion = await ventasService.ListarVentasFiltradas(
                Filtro,
                ValorFiltro,
                FechaDesde,
                FechaHasta,
                CurrentPage,
                PageSize
            );

            ListaVentas = paginacion ?? new List<Ventas>();
        }
        catch (Exception ex)
        {
            ListaVentas = new List<Ventas>();
            paginacion = null;
            toastService.ShowError("Error al cargar los ventas: " + ex.Message);
        }
        StateHasChanged();
    }

    private async Task Buscar()
    {
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }

    private async Task Ordenar(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "TicketId";
        ValorFiltro = "";
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }

    private async Task GoToPage(int pageNumber)
    {
        if (paginacion != null && pageNumber > 0 && pageNumber <= paginacion.TotalPages)
        {
            CurrentPage = pageNumber;
            await CargarYOrdenar();
        }
    }
}