@page "/Tecnico/Create"
@using RegistroTecnico.Services
@using RegistroTecnico.Models
@inject TecnicosService tecnicosService
@inject IToastService toastService
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    @* Mensajes visibles en texto, además de los toasts *@
    <label style="color:red;" hidden="@string.IsNullOrEmpty(ErrorNombre)">@ErrorNombre</label>
    <label style="color:green;" hidden="@string.IsNullOrEmpty(GuardarExito)">@GuardarExito</label>

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Registro de Técnicos</h5>
            </div>

            <div class="card-body">
                @* ID Técnico *@
                <div class="mb-3">
                    <label class="form-label"><strong>TecnicoId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>
                </div>

                @* Nombre *@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Tecnico.Nombres"></InputText>
                    <ValidationMessage For="@(() => Tecnico.Nombres)" />
                </div>

                @* Sueldo por Hora *@
                <div class="mb-3">
                    <label class="form-label"><strong>Sueldo por Hora</strong></label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.SueldoHora"></InputNumber>
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Tecnico/Index" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
                <button type="reset" class="btn btn-outline-primary bi bi-plus" @onclick="Limpiar"> Limpiar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    private string ErrorNombre { get; set; } = string.Empty;
    private string GuardarExito { get; set; } = string.Empty;

    private void Limpiar() => Tecnico = new();

    private async Task<bool> Validar()
    {
        ErrorNombre = string.Empty;
        return !await tecnicosService.ExisteNombre(Tecnico.Nombres);
    }

    public async Task Guardar()
    {
        GuardarExito = string.Empty;
        ErrorNombre = string.Empty;

        if (await tecnicosService.ExisteNombre(Tecnico.Nombres))
        {
            ErrorNombre = "Ya existe un técnico con este nombre.";
            toastService.ShowError(ErrorNombre);
            return;
        }

        var creado = await tecnicosService.Guardar(Tecnico);

        if (creado)
        {
            GuardarExito = "Técnico guardado correctamente.";
            toastService.ShowSuccess(GuardarExito);
            Limpiar();
        }
        else
        {
            toastService.ShowError("No se pudo guardar correctamente el técnico. Verifica los datos.");
        }
    }
}
