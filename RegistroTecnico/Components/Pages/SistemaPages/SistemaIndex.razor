@page "/Sistemas/Index"
@using RegistroTecnico.Models 
@using RegistroTecnico.Services
@inject SistemasService sisService
@inject IToastService toastService
@inject NavigationManager navManager 
@rendermode InteractiveServer

<PageTitle>Registro de Sistemas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center">
            <h3 class="card-title fw-bold">Consultar Sistemas</h3>
        </div>

        <div class="card-body">

            @* Filtros *@
            <div class="row mb-2">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opción</option>
                        <option value="SistemaId">SistemaId</option>
                        <option value="Complejidad">Complejidad</option>
                        <option value="Descripcion">Descripción</option>
                        <option value="Existencia">Existencia</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>
                <div class="col text-end mt-2"> 
                    <a href="/Sistemas/Create" class="btn btn-success"> 
                        <i class="bi bi-plus-square"></i> Crear
                    </a>
                </div>
            </div>


            @* Tabla *@
            <table class="table table-hover">
                <thead class="table table-striped text-black">
                    <tr>
                        <th>SistemaId</th>
                        <th>Complejidad</th>
                        <th>Descripción</th>
                        <th>Precio</th>
                        <th>Existencia</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ListaSistemas == null || ListaSistemas.Count == 0) 
                    {
                        <tr>
                            <td colspan="5" class="text-center">No hay sistemas registrados</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var sistema in ListaSistemas)
                        {
                            <tr>
                                <td>@sistema.SistemaId</td>
                                <td>@sistema.Complejidad.ToString("N2")</td>
                                <td>@sistema.Descripcion</td>
                                <td>@sistema.precio.ToString("N2")</td>
                                <td>@sistema.Existencia</td>
                                <td>
                                    <a href="/Sistemas/Edit/@sistema.SistemaId" class="btn btn-outline-primary bi bi-pencil-square"></a> 
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
    </div>
</div>

@code {
    public List<Sistemas> ListaSistemas { get; set; } = new();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        
        ListaSistemas = await sisService.Listar(s => true);
    }

    private async Task Buscar()
    {
        
        if (string.IsNullOrWhiteSpace(Filtro) || string.IsNullOrWhiteSpace(ValorFiltro))
        {
            await CargarTodosLosSistemas();
            return;
        }

        
        System.Linq.Expressions.Expression<Func<Sistemas, bool>> predicado = null;

        switch (Filtro)
        {
            case "SistemaId":
                if (int.TryParse(ValorFiltro, out int sistemaId))
                {
                    predicado = s => s.SistemaId == sistemaId;
                }
                else
                {
                    toastService.ShowWarning("Por favor, ingrese un número válido para Sistema ID.");
                    return;
                }
                break;
            case "Complejidad":
                if (double.TryParse(ValorFiltro, out double complejidad))
                {
                    predicado = s => s.Complejidad == complejidad;
                }
                else
                {
                    toastService.ShowWarning("Por favor, ingrese un número válido para Complejidad.");
                    return;
                }
                break;
            case "Descripcion":
                
                predicado = s => s.Descripcion.ToLower().Contains(ValorFiltro.ToLower());
                break;
            case "Existencia":
                if (int.TryParse(ValorFiltro, out int existencia))
                {
                    predicado = s => s.Existencia == existencia;
                }
                else
                {
                    toastService.ShowWarning("Por favor, ingrese un número válido para Existencia.");
                    return;
                }
                break;
            default:
                // Si el filtro no coincide con nada conocido, simplemente cargamos todos los sistemas.
                await CargarTodosLosSistemas();
                return;
        }

        // Si se construyó un predicado válido, se lo pasamos al servicio.
        if (predicado != null)
        {
            ListaSistemas = await sisService.Listar(predicado);
        }
        else
        {
            // En caso de que no se haya podido construir el predicado (ej. por un valor de filtro inválido)
            await CargarTodosLosSistemas();
        }


        if (ListaSistemas.Count > 0)
        {
            toastService.ShowSuccess("Sistemas encontrados.");
        }
        else
        {
            toastService.ShowWarning("No se encontraron sistemas con ese criterio.");
        }

        StateHasChanged();
    }

    private async Task CargarTodosLosSistemas()
    {
        ListaSistemas = await sisService.Listar(s => true);
        StateHasChanged();
    }
}