@page "/Sistemas/Edit/{SistemaId:int}"
@using RegistroTecnico.Models 
@using RegistroTecnico.Services
@inject SistemasService sisService
@inject NavigationManager navigationManager
@inject Blazored.Toast.Services.IToastService toastService
@rendermode InteractiveServer

<PageTitle>Editar Sistema</PageTitle>

<EditForm Model="Sistema" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg mt-4">
            <div class="card-header text-center">
                <h5 class="card-title fw-bold">Editar Sistema</h5>
            </div>

            <div class="card-body">

                <div class="mb-3">
                    <label class="form-label"><strong>SistemaId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Sistema.SistemaId" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Descripcion</strong></label>
                    @* Cambiado a InputTextArea para mejor manejo del binding de Blazor con textarea *@
                    <InputTextArea class="form-control" @bind-Value="Sistema.Descripcion" rows="5"></InputTextArea>
                    <ValidationMessage For="() => Sistema.Descripcion" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Complejidad</strong></label>
                    <InputNumber class="form-control" @bind-Value="Sistema.Complejidad" />
                    <ValidationMessage For="() => Sistema.Complejidad" />
                </div>

                @* AÑADIDO: Campo para Existencia *@
                <div class="mb-3">
                    <label class="form-label"><strong>Existencia</strong></label>
                    <InputNumber class="form-control" @bind-Value="Sistema.Existencia" />
                    <ValidationMessage For="() => Sistema.Existencia" />
                </div>

            </div>

            <div class="card-footer text-center mt-2">
                <button type="button" class="btn btn-outline-secondary me-2" @onclick="Volver">
                    <i class="bi bi-arrow-left-circle"></i> Volver
                </button>
                <button type="submit" class="btn btn-outline-success me-2">
                    <i class="bi bi-save"></i> Guardar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="() => mostrarModal = true">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-danger fw-bold">¿Estás seguro de que deseas eliminar este sistema?</p>

                    <div class="mt-3">
                        <p><strong>SistemaId:</strong> @Sistema.SistemaId</p>
                        <p><strong>Descripción:</strong> @Sistema.Descripcion</p>
                        <p><strong>Complejidad:</strong> @Sistema.Complejidad</p>
                        <p><strong>Existencia:</strong> @Sistema.Existencia</p> @* AÑADIDO: Mostrar Existencia en el modal de confirmación *@
                    </div>
                </div>

                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-outline-secondary me-2" @onclick="CerrarModal">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>
                    <button class="btn btn-outline-danger" @onclick="Eliminar">
                        <i class="bi bi-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int SistemaId { get; set; }

    private Sistemas Sistema { get; set; } = new Sistemas();
    private bool mostrarModal = false;

    protected override async Task OnInitializedAsync()
    {
        var resultado = await sisService.Buscar(SistemaId);
        if (resultado != null)
            Sistema = resultado;
        else
            // CORREGIDO: La ruta a la página de índice de sistemas
            navigationManager.NavigateTo("/Sistemas/Index");
    }

    private async Task Guardar()
    {
        // Asumiendo que sisService.Guardar(Sistema) devuelve un bool o el objeto guardado
        // y que ManejarErrores lo controla. Si devuelve el objeto, el != null es correcto.
        var guardado = await sisService.Guardar(Sistema);
        if (guardado != null) // Si tu Guardar devuelve el objeto guardado o true
        {
            toastService.ShowSuccess("Sistema guardado correctamente");
            // Puedes navegar o no, dependiendo de la experiencia de usuario deseada
            // navigationManager.NavigateTo("/Sistemas/Index");
        }
        else
        {
            toastService.ShowError("Error al guardar el sistema");
        }
    }

    private async Task Eliminar()
    {
        // Este ya estaba correcto, pasando Sistema.SistemaId (int)
        var eliminado = await sisService.Eliminar(Sistema.SistemaId);
        mostrarModal = false; // Cierra el modal después de intentar eliminar

        if (eliminado)
        {
            toastService.ShowSuccess("Sistema eliminado correctamente");
            // CORREGIDO: La ruta a la página de índice de sistemas
            navigationManager.NavigateTo("/Sistemas/Index");
        }
        else
        {
            toastService.ShowError("No se pudo eliminar el sistema");
        }
    }

    private void Volver()
    {
        // CORREGIDO: La ruta a la página de índice de sistemas
        navigationManager.NavigateTo("/Sistemas/Index");
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }
}